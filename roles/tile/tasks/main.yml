# SPDX-License-Identifier: MIT
---
# Setup for tile.openstreetmap.de
#
# To finish the setup you need to run
#
# - sudo /usr/local/sbin/import-osm2pgsql
#   (and check if you want to render deeper than specified at the end of the script)
#

# apache, system accounts, set up db
- name: Setup apache
  include_role:
    name: apache

- name: Create tile system account
  system_account:
    name: "{{ tile__user }}"
    home: "{{ tile__basedir }}"

- name: Create _tirex system account
  system_account:
    name: "_tirex"
    home: "/nonexistent"

- name: Set up postgresql user
  postgresql_user:
    name: _tirex
  become_user: postgres

- name: Set up postgresql database
  postgresql_db:
    name: osm
    owner: _tirex
  become_user: postgres

- name: Adapt postgres configuration
  postgresql_config:
    name: tile-de
    config:
      max_parallel_workers_per_gather: 0
      work_mem: "128MB"
      temp_buffers: "32MB"
      random_page_cost: "1.1"
      jit: "off"

- name: Set up postgis, hstore on database osm
  postgresql_ext:
    name: "{{ item }}"
    db: osm
  become_user: postgres
  loop:
    - postgis
    - hstore

# osm2pgsql
- name: install osm2pgsql with apt
  apt:
    name: [osm2pgsql, pyosmium]

- name: install required packages with apt
  apt:
    name: [git, dpkg-dev, debhelper, libmapnik-dev, python3-mapnik]

- name: import script
  template:
      dest: "/usr/local/sbin/import-osm2pgsql"
      src: "import-osm2pgsql.j2"
      mode: 0755
  vars:
    dbname: osm
    style: "{{ tile__basedir }}/openstreetmap-carto-de"
    lua: "{{ tile__basedir }}/sources/osml10n/openstreetmap-carto-hstore-only-l10n.lua"

- name: Make sure destination dir for flatnode file, planet and bin dir exist
  file:
    path: "{{ item | dirname }}"
    state: directory
  loop:
    - "{{ tile__flatnode }}"
    - "{{ tile__planet }}"
    - "{{ tile__basedir }}/bin/expire-tiles-single.py"

- name: update external data script
  template:
      dest: "{{ tile__basedir }}/bin/update-external-data"
      src: "update-external-data.j2"
      mode: 0755
  vars:
    dbname: osm
    style: "{{ tile__basedir }}/openstreetmap-carto-de"

- name: render database updates from minutely
  template:
      dest: "/etc/systemd/system/updatedb.service"
      src: "updatedb.j2"
  vars:
    dbname: osm
    lua: "{{ tile__basedir }}/sources/osml10n/openstreetmap-carto-hstore-only-l10n.lua"
    difffile: /tmp/latest_changes.osc
    expiretiles: "{{ tile__basedir }}/bin/expire-tiles.sh"

# style
- name: german style
  git:
    repo: https://github.com/giggls/openstreetmap-carto-de.git
    dest: "{{ tile__basedir }}/openstreetmap-carto-de"
    version: "{{ tile__style_version }}"
  register: tile_mapnik_git
  become: yes
  become_user: "{{ tile__user }}"

- name: Dependencies for style and localization functions for OpenStreetMap
  apt:
    name: [ nodejs, npm, fonts-noto, fonts-noto-ui-core, fonts-noto-cjk-extra,
            fonts-dejavu, fonts-hanazono, python3-yaml, gdal-bin,
            #localization functions:
            libunac1-dev, luarocks, lua5.3, liblua5.3-dev,
            python3-icu, python3-shapely, python3-pip, python3-sdnotify,
            python3-requests, fakeroot, build-essential, python3-virtualenv,]

- name: node carto for style transformation
  shell:
    cmd: "npm install --global carto"
    creates: "/usr/local/bin/carto"

- name: generate mapnik xml
  shell:
    cmd: "make; git checkout project.mml"
    chdir: "{{ tile__basedir }}/openstreetmap-carto-de"
  become: yes
  become_user: "{{ tile__user }}"
  when: tile_mapnik_git.changed

# Patch for https://github.com/giggls/osml10n/issues/27
# Remove this and the entry in the task 'Set up virtualenv' once the issue has been fixed in the repo.
- name: install inbbox script
  copy:
    dest: "{{ tile__basedir }}/bin/sklearn-0.0.post9.tar.gz"
    src: "sklearn-0.0.post9.tar.gz"
    mode: 0755

- name: Set up virtualenv
  pip:
    name:
      - "file:///{{ tile__basedir }}/bin/sklearn-0.0.post9.tar.gz"
      - scikit-learn==1.3.0 #https://pypi.org/project/scikit-learn/
      - pykakasi==2.2.1 #https://pypi.org/project/pykakasi/
      - tltk==1.6.8 #https://pypi.org/project/tltk/
      - pinyin_jyutping_sentence==1.3 #https://pypi.org/project/pinyin-jyutping-sentence/
    virtualenv: "{{ tile__basedir }}/venv"
    virtualenv_site_packages: yes
    virtualenv_python: python3
  become_user: "{{ tile__user }}"

- name: Localization functions for OpenStreetMap
  git:
    repo: https://github.com/giggls/osml10n.git
    dest: "{{ tile__basedir }}/sources/osml10n"
    version: "{{ tile__osml10n_version }}"
  register: tile_osml10n_sources
  become: yes
  become_user: "{{ tile__user }}"

- name: clear outdated .deb packages of osml10n
  shell:
    cmd: "rm -f {{ tile__basedir }}/sources/osml10n*.deb {{ tile__basedir }}/sources/osml10n/*.deb"
  become: yes
  become_user: "{{ tile__user }}"
  when: tile_osml10n_sources.changed

- name: Build osml10n debian packages
  shell:
    cmd: "make deb"
    chdir: "{{ item }}"
  become: yes
  become_user: "{{ tile__user }}"
  loop:
    - "{{ tile__basedir }}/sources/osml10n"
    - "{{ tile__basedir }}/sources/osml10n/lua_unac"

- name: Find buildt .deb packages lua-unaccent
  find:
    paths:
      - "{{ tile__basedir }}/sources/osml10n/"
    patterns: ["lua-unaccent_*.deb"]
  register: lua_unaccent_deb

- name: Install lua-unaccent debian package
  apt:
    deb: "{{ item }}"
  with_items: "{{ lua_unaccent_deb.files | map(attribute='path') }}"
  become: yes

- name: Find buildt .deb packages lua-unaccent-dbgsym
  find:
    paths:
      - "{{ tile__basedir }}/sources/osml10n/"
    patterns: ["lua-unaccent-dbgsym_*.deb"]
  register: lua_unaccent_dbgsym_deb

- name: Install lua-unaccent-dbgsym debian package
  apt:
    deb: "{{ item }}"
  with_items: "{{ lua_unaccent_dbgsym_deb.files | map(attribute='path') }}"
  become: yes

- name: Find buildt .deb packages tile_osml10n
  find:
    paths:
      - "{{ tile__basedir }}/sources/"
    patterns: ["osml10n*.deb"]
  register: tile_osml10n_deb

- name: Install osml10n debian package
  apt:
    deb: "{{ item }}"
  with_items: "{{ tile_osml10n_deb.files | map(attribute='path') }}"
  become: yes
  register: tile_osml10n_install

- name: Make osml10n service use the virtual env
  shell:
    cmd: "cp /lib/systemd/system/osml10n.service /etc/systemd/system/osml10n.service;
          sed -i 's:ExecStart=:ExecStart={{ tile__basedir }}/venv/bin/python :' /etc/systemd/system/osml10n.service"
  when: tile_osml10n_install.changed

- name: Systemd daemon reload and start osml10n service
  ansible.builtin.systemd:
    daemon_reload: true
    state: started
    enabled: true
    name: osml10n
  when: tile_osml10n_install.changed


- name: Add osmde map style
  set_fact:
    tile__styles: "{{ tile__styles|default([]) + osmde }}"
  vars:
    osmde:
      - name: "osmde"
        url:  ""
        xml:  "{{ tile__basedir }}/openstreetmap-carto-de/osm-de.xml"
        order: 99 # needs to be last, because it binds / and would override the other

- name: Add osmhrb map style
  set_fact:
    tile__styles: "{{ tile__styles|default([]) + osmhrb }}"
  vars:
    osmhrb:
      - name: "osmhrb"
        url:  "osmhrb/"
        xml:  "{{ tile__basedir }}/openstreetmap-carto-de/osm-hrb.xml"
        order: 1

# !!!---------------------------------------------------------------------------!!!
# !!!            tile__styles must be fixed beyond this point!                  !!!
# !!!            Do all style entries above this line                           !!!
# !!!---------------------------------------------------------------------------!!!
# tirex tile server
- name: install tirex dependencies with apt
  apt:
    name: [renderd, devscripts, dh-apache2,
           libjson-perl, libipc-sharelite-perl, libgd-perl]

- name: disable renderd (enabled after installation)
  ansible.builtin.systemd:
    state: stopped
    enabled: false
    name: renderd

- name: Install tirex with apt
  apt:
    name: tirex

- name: Create directories in /etc/tirex
  file:
    path: "{{ item }}"
    state: directory
    owner: '{{ tile__user }}'
    group: '{{ tile__user  }}'
    mode: 0755
  loop:
    - "/etc/tirex"
    - "/etc/tirex/renderer"
    - "/etc/tirex/renderer/mapnik"

- name: Tirex main config
  copy:
    dest: "/etc/tirex/tirex.conf"
    src: "tirex.conf"

- name: Trex mapnik backend config
  copy:
    dest: "/etc/tirex/renderer/mapnik.conf"
    src: "mapnik.conf"

- name: Tirex mapnik style config
  template:
    dest: "/etc/tirex/renderer/mapnik/{{ item.name }}.conf"
    src: tirex_style_conf.j2
  vars:
    name: "{{ item.name }}"
    mapfile: "{{ item.xml }}"
  loop: "{{ tile__styles }}"

- name: Create tile directory
  file:
    path: "/var/cache/tirex/tiles/{{ item.name }}"
    state: directory
    owner: _tirex
    group: _tirex
    mode: 0755
  loop: "{{ tile__styles }}"

- name: Make sure tirex-backend-manager is running
  ansible.builtin.systemd:
    state: started
    enabled: true
    name: tirex-backend-manager

- name: Make sure tirex-master is running
  ansible.builtin.systemd:
    state: started
    enabled: true
    name: tirex-master

# tile expiry
# the tile expiry python script is from
# https://github.com/openstreetmap/chef/blob/master/cookbooks/tile/files/default/bin/expire-tiles-single
- name: tile expiry python script
  copy:
    dest: "{{ tile__basedir }}/bin/expire-tiles-single.py"
    src: "expire-tiles-single.py"

- name: required python package for expire-tiles-single
  apt:
    name: [python3-pyproj]

- name: tile expiry script
  template:
    dest: "{{ tile__basedir }}/bin/expire-tiles.sh"
    src: "expire-tiles.j2"
    mode: 0755
  vars:
    difffile: /tmp/latest_changes.osc
    expiretilessingle: "{{ tile__basedir }}/bin/expire-tiles-single.py"
    styles: "{{ tile__styles }}"

# script to identify rhb tile rendered area, gray out outside area
- name: install inbbox script
  copy:
    dest: "{{ tile__basedir }}/bin/inbbox.py"
    src: "inbbox.py"
    mode: 0755

- name: Create directories for gray
  file:
    path: "{{ tile__basedir }}/gray"
    state: directory
    owner: '{{ tile__user }}'
    group: '{{ tile__user  }}'
    mode: 0755

- name: required packages for TileProxy-Grayscale
  apt:
    name: [starman, libplack-perl, libimage-magick-perl, librouter-simple-perl]

- name: clone App-TileProxy-Grayscale git
  git:
    repo: https://github.com/mstock/App-TileProxy-Grayscale.git
    dest: "{{ tile__basedir }}/gray/App-TileProxy-Grayscale"
  register: tile_tirex_sources
  become: yes
  become_user: "{{ tile__user }}"

- name: App-TileProxy-Grayscale config
  template:
    dest: "{{ tile__basedir }}/gray/app.psgi"
    src: "TileProxy-Grayscale-config.j2"
  vars:
    libdir: "{{ tile__basedir }}/gray/App-TileProxy-Grayscale/lib"

- name: App-TileProxy-Grayscale systemd service
  template:
    dest: "/etc/systemd/system/tileproxy-grayscale.service"
    src: "TileProxy-Grayscale-systemd.j2"
  vars:
    workdir: "{{ tile__basedir }}/gray/"

- name: Make sure tileproxy-grayscale is running
  ansible.builtin.systemd:
    state: started
    enabled: true
    name: tileproxy-grayscale


# static website
- name: Create directory for site
  file:
    path: "{{ tile__basedir }}/site"
    state: directory
    owner: '{{ tile__user }}'
    group: '{{ tile__user  }}'
    mode: 0755

- name: Clone static website repo
  git:
    repo: https://gitlab.fossgis.de/osm-server/tileserver-web.git
    dest: "{{ tile__basedir }}/tileserver-web"
    force: yes
  become: yes
  become_user: "{{ tile__user }}"

- name: install required packages with apt
  apt:
    name: [rsync]

- name: Sync static website dist with DocumentRoot
  ansible.posix.synchronize:
    src: "{{ tile__basedir }}/tileserver-web/src/dist/"
    dest: "{{ tile__basedir }}/site/"
    recursive: true
  delegate_to: "{{ inventory_hostname }}"

# Run the script that sets the variables of the website 
# (carto version, l10n version, hostname) correctly

- name: build html list of servers for the tile page
  set_fact:
    tile__server_html_list: "{{ tile__server_html_list|default(\"\") }}
      <li>
          <a href=\"https://{{ item }}.openstreetmap.de/?folder=\">
              {{ item }}, Folder: / (de)
          </a>
      </li><li>
          <a href=\"https://{{ item }}.openstreetmap.de/?folder=osmhrb\">
              {{ item }}, Folder: osmhrb
          </a>
      </li>"
  loop: "{{ groups.tile }}"

- name: list localhost for if tile__small is set (vagrant use case)
  set_fact:
    tile__server_html_list: "
      <li>
      <a href=\"https://localhost:8443?folder=\">
              {{ item }}, Folder: / (de)
          </a>
      </li><li>
      <a href=\"https://localhost:8443?folder=osmhrb\">
              {{ item }}, Folder: osmhrb
          </a>
      </li>"
  loop: "{{ groups.tile }}"
  when: tile__small

- name: set vite_hostname 
  set_fact:
    tile__hostname: "{{ inventory_hostname }}.openstreetmap.de"

- name: set vite_hostname if tile__small is set (vagrant use case)
  set_fact:
    tile__hostname: "localhost:8443"
  when: tile__small

- name: Replace vars on static website
  shell:
    cmd: "cd {{ tile__basedir }}/site/assets;

          sed -i \"s/VITE_OSML10N_VERSION/{{ tile__osml10n_version }}/g\" *.js;
          sed -i \"s/VITE_OPENSTREETMAP_CARTO_DE_VERSION/{{ tile__style_version }}/g\" *.js;
          sed -i 's%VITE_HOSTNAME%{{ tile__hostname }}%' *.js;

          cd {{ tile__basedir }}/site;

          sed -i 's%VITE_NAVIGATION_LIST%<li>
            <a href=\"https://tile.openstreetmap.de/?folder=\">
              tile.openstreetmap.de, Folder: / (de)
            </a></li><li>
            <a href=\"https://tile.openstreetmap.de/?folder=osmhrb\">
              tile.openstreetmap.de, Folder: osmhrb
            </a></li>{{ tile__server_html_list }}%' index.html;
          "
  become: yes
  become_user: "{{ tile__user }}"

# apache http server conf
- name: apache enable proxy module
  apache_module:
    name: proxy_http

- name: apache enable header module
  apache_module:
    name: headers

- name: default apache site
  apache_site:
    site: 'default'
    src:  'apache-default.j2'
  vars:
    server_name: "_"
    cert: "tilede"
    styles: "{{ tile__styles }}"
  notify: reload apache2

- name: apache mpm config
  copy:
    dest: "/etc/apache2/mods-available/mpm_event.conf"
    src: mpm_event.conf

# rerendering of low zooms
- name: queue low zoom tiles for rerendering periodically (systemd timer)
  systemd_service:
    name: lowzoom_rerender
    enabled: true
    service:
      Unit:
        Description: Queue up rerendering of low zoom tiles with tirex-batch
      Service:
        Type: oneshot
        ExecStart: tirex-batch --prio=99 map=osmde z=1-12 lon=-180,180 lat=-90,90
        User: "{{ tile__user }}"
        Group: "{{ tile__user }}"
    timer:
      OnCalendar: "Sat *-*-* 00:00:00"
      RandomizedDelaySec: 43200
      Persistent: "true"

# update external data (https://github.com/gravitystorm/openstreetmap-carto/blob/master/scripts/get-external-data.py)
- name: update external data for rerendering periodically (systemd timer)
  systemd_service:
    name: update_external_data
    enabled: true
    service:
      Unit:
        Description: Update external data data for rerendering periodically
      Service:
        Type: oneshot
        ExecStart: "{{ tile__basedir }}/bin/update-external-data"
        User: "{{ tile__user }}"
        Group: "{{ tile__user }}"
    timer:
      OnCalendar: "Sun *-*-* 00:00:01"
      RandomizedDelaySec: 43200
      Persistent: "true"

# reload style if necessary
- name: Restart tirex-backend-manager if style has changed
  ansible.builtin.systemd:
    state: restarted
    enabled: true
    name: tirex-backend-manager
  when: tile_mapnik_git.changed

