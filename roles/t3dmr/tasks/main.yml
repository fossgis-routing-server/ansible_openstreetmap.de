# Setup for 3dmr.eu.
#
# This is a simple django setup. To finish the setup you need to
#
#  - dump and restore the Postgresql database 3dmr
#  - copy the model repository from /srv/3dmr/models/
#  - run /srv/3dmr/bin/nightly.sh once manually to create the first dump.
#
- name: Create user for 3drm
  system_account:
    name: "{{ t3dmr__user }}"
    home: "{{ t3dmr__basedir }}"

- name: Populate home directory
  file:
    dest: "{{ t3dmr__basedir }}/{{ item }}"
    owner: "{{ t3dmr__user }}"
    group: "{{ t3dmr__user }}"
    state: directory
  loop:
    - bin
    - bin/gltf_validator
    - models
    - static/mainapp


- name: Install prerequisites
  apt:
    name:
      - git
      - python3-virtualenv
      - nodejs
      - npm

- name: Checkout source code
  git:
    repo: https://github.com/fossgis/3dmr.git
    dest: "{{ t3dmr__basedir }}/3dmr"
    force: yes
  become_user: "{{ t3dmr__user }}"

# Custom list of requirements. We want to use some system packages
# and don't need development packages.
- name: Set up virtualenv
  pip:
    requirements: "{{ t3dmr__basedir }}/3dmr/requirements.txt"
    virtualenv: "{{ t3dmr__basedir }}/venv"
    virtualenv_python: python3
  become_user: "{{ t3dmr__user }}"

- name: Install gunicorn
  pip:
    name: gunicorn
    virtualenv: "{{ t3dmr__basedir }}/venv"
  become_user: "{{ t3dmr__user }}"

- name: Download Khronos validator
  ansible.builtin.unarchive:
    src: https://github.com/KhronosGroup/glTF-Validator/releases/download/2.0.0-dev.3.10/gltf_validator-2.0.0-dev.3.10-linux64.tar.xz
    dest: "{{ t3dmr__basedir }}/bin/gltf_validator"
    creates: "{{ t3dmr__basedir }}/bin/gltf_validator/gltf_validator"
    remote_src: yes
  become_user: "{{ t3dmr__user }}"

- name: Set up postgresl user
  postgresql_user:
    name: "{{ t3dmr__db_user }}"
    password: "{{ t3dmr__db_password }}"
  become_user: postgres

- name: Set up environment
  ansible.builtin.copy:
    dest: "{{ t3dmr__basedir }}/3dmr/.env"
    content: |
      POSTGRES_DB=3dmr
      POSTGRES_USER={{ t3dmr__db_user }}
      POSTGRES_PASSWORD={{ t3dmr__db_password }}
      OSM_CLIENT_SECRET={{ t3dmr__osm_secret }}
      OSM_CLIENT_ID={{ t3dmr__osm_key }}
      DEBUG=False
      DJANGO_SECRET_KEY={{ t3dmr__django_key }}
      MODEL_DIR={{ t3dmr__basedir }}/models
      STATIC_ROOT={{ t3dmr__basedir }}/static
      GLTF_VALIDATOR_PATH={{ t3dmr__basedir }}/bin/gltf_validator/gltf_validator
      ALLOWED_HOSTS=3dmr.eu,{{ ansible_host }},{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}

- name: Compile javascript
  shell:
    cmd: "npm install && npm run build"
    chdir: "{{ t3dmr__basedir }}/3dmr/mainapp/static_src"
  become_user: "{{ t3dmr__user }}"

- name: Deploy static resources
  shell:
    cmd: "{{ t3dmr__basedir }}/venv/bin/python3 manage.py collectstatic --noinput"
    chdir: "{{ t3dmr__basedir }}/3dmr"
  become_user: "{{ t3dmr__user }}"

- name: Set up nightly script
  template:
    src: nightly.sh.jinja
    dest: "{{ t3dmr__basedir }}/bin/nightly.sh"
    owner: "{{ t3dmr__user }}"
    group: "{{ t3dmr__user }}"
    mode: "0755"

- name: Create nightly exports
  cron:
    name: 3dmr nightly exports
    minute: "0"
    hour: "4"
    job: "/home/tdmr/nightly.sh"
    user: "{{ t3dmr__user }}"

- name: Setup gunicorn systemd job
  systemd_service:
    name: 3dmr
    enabled: true
    state: started
    service:
      Unit:
        Description: 3DMR Gunicorn daemon
        After: network.target
      Service:
        User: "{{ t3dmr__user }}"
        Group: "www-data"
        WorkingDirectory: "{{ t3dmr__basedir }}/3dmr"
        ExecStart: "{{ t3dmr__basedir }}/venv/bin/gunicorn modelrepository.wsgi:application --bind unix:/run/3dmr.sock"
      Install:
        WantedBy: multi-user.target
    socket:
      ListenStream: /run/3dmr.sock
      SocketUser: "{{ t3dmr__user }}"

- name: Set up nginx site
  nginx_site:
    site: 3dmr.eu
    src: 3dmr.eu.apache.conf.jinja
  notify: reload nginx
