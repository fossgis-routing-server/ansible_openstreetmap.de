
map $http_accept_language $lang {
    default en;
    ~en en;
    ~de de;
    ~es es;
    ~fr fr;
    ~ru ru;
    ~sv sv;
    ~vi vi;
    ~zh zh;
}

{% call server([server_name], http='yes', https=cert, listen_params=default_server ) %}

    root {{ root }};

    index index.html;

    location = / {
        set $relang 'en';
        if ($query_string !~ "(^|&)hl=") {
            set $relang $lang;
        }

        if ($relang !~ 'en') {
            rewrite ^ https://$host/?hl=$relang redirect;
        }
    }

    location / {
        # First attempt to serve request as file, then
        # as directory, then fall back to displaying a 404.
        try_files $uri $uri/ =404;
    }

    location /nginx_status {
        # Enable Nginx stats
        stub_status on;
        # Only allow access from localhost
        allow 127.0.0.1;
        allow ::1;
        # Other request should be denied
        deny all;
    }

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    
    location ~ /\.ht {
           deny all;
    }
    
    error_page 429 /429.html;
    location /429.html {
        add_header access-control-allow-origin "*" always;
    }

{% if answer_routes %}
    limit_req_status 429;

    access_log /var/log/nginx/router.log anonymized;

{% for profile in osrm__profiles.keys() %}
    location /routed-{{ profile }} {
        limit_req zone=standard burst=10;
        limit_req zone=table burst=1;
        limit_req zone=tile burst=50;
        rewrite_by_lua_file /etc/nginx/lua/{{ profile }}rewrite.lua;
    }
{% endfor %}

{% for profilearea in osrm__profilearea.keys() %}
    location /routed-{{ profilearea }}/ {
        internal;
{% if osrm__profilearea[profilearea].host == inventory_hostname %}
        proxy_pass  http://127.0.0.1:{{ osrm__profilearea[profilearea].port }}/;
{% else %}
        proxy_pass  http://{{ osrm__profilearea[profilearea].host }}.openstreetmap.de:{{ osrm__profilearea[profilearea].port }}/;
{% endif %}
        access_log /var/log/nginx/router.log anonymized;
        access_log /var/log/nginx/routing-times-{{ osrm__profilearea[profilearea].profile }}.log access_times;
    }
{% endfor %}
    location /null-island {
        internal;
        add_header Access-Control-Allow-Headers "X-Requested-With, Content-Type";
        add_header Access-Control-Allow-Methods GET;
        add_header Access-Control-Allow-Origin *;
        add_header Content-Disposition 'inline; filename="response.json"';
        add_header Content-Type "application/json; charset=UTF-8";
        return 200 '{"message":"Welcome to Null Island. At least one point you entered is 0,0 (Which is in the middle of the ocean. There is only a buoy known as Null Island) which means that this query is not meaningful. Because this is so common, we don\'t answer requests for 0,0 to preserve resources.","code":"InvalidOptions"}';
    }

{% endif %}

{% if munin %}
    location /munin/static/ {
{% if answer_routes %}
        limit_req zone=standard burst=100 nodelay;
{% endif %}
        alias /etc/munin/static/;
        expires modified +1w;
    }

    location /munin/ {
{% if answer_routes %}
        limit_req zone=standard burst=100 nodelay;
{% endif %}
        alias /var/cache/munin/www/;
        expires modified +310s;
    }

    location ^~ /munin-cgi/munin-cgi-graph/ {
        access_log off;
        fastcgi_split_path_info ^(/munin-cgi/munin-cgi-graph)(.*);
        fastcgi_param PATH_INFO $fastcgi_path_info;
        fastcgi_pass unix:/var/run/munin/fastcgi-graph.sock;
        include fastcgi_params;
    }
{% endif %}

    location /timestamps/ {
        types { } default_type "text/html; charset=utf-8";
    }
{% endcall %}
