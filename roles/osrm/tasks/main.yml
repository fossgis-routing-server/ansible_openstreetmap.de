# SPDX-License-Identifier: MIT
---

- name: "set variable"
  set_fact:
    this_host_profiles: "{{ osrm__profilearea | dict2items | selectattr(\"value.host\", \"equalto\", inventory_hostname) }}"

- name: "this host profiles"
  debug:
    msg: "{{ this_host_profiles | map(attribute='key') }}"

- name: Create osrm system account
  system_account:
    name: "{{ osrm__user }}"
    home: "{{ osrm__basedir }}"

- name: Create osrmdata system account
  system_account:
    name: "{{ osrm__datauser }}"
    home: "/home/osrmdata"
    shell: "/bin/bash"

# osrm backend
- name: install prerequisites for osrm-backend
  apt:
    name: [git, clang, build-essential, cmake,  pkg-config, libprotoc-dev, protobuf-compiler,
           libprotobuf-dev, libosmpbf-dev, libpng-dev, libbz2-dev, libstxxl-dev,
           libstxxl-doc, libstxxl1v5, libxml2-dev, libzip-dev, libboost-thread-dev,
           libboost-system-dev, libboost-regex-dev, libboost-filesystem-dev,
           libboost-program-options-dev, libboost-iostreams-dev,
           libboost-test-dev, liblua5.2-dev, libtbb-dev, libexpat-dev]

- name: checkout osrm-backend
  git:
    repo: https://github.com/fossgis-routing-server/osrm-backend.git
    dest: '{{ osrm__basedir }}/osrm-backend'
    version: '512b0ac40ec53f9aa718189262ea83835a27260f'
  register: osrm_backend_build
  become: yes
  become_user: '{{ osrm__user }}'

- name: clear osrm-backend build dir
  file:
    path: '{{ osrm__basedir }}/osrm-backend/build'
    state: absent
  when: osrm_backend_build.changed

- name: create osrm-backend build dir
  file:
    path: '{{ osrm__basedir }}/osrm-backend/build'
    state: directory
    owner: '{{ osrm__user }}'
    group: '{{ osrm__user }}'

- name: build osrm-backend
  shell:
    cmd: "cmake -DCMAKE_BUILD_TYPE=Release .. && make -j {{ ansible_facts['processor_cores'] }}"
    chdir: '{{ osrm__basedir }}/osrm-backend/build/'
    creates: '{{ osrm__basedir }}/osrm-backend/build/osrm-extract'
  environment:
    CC: clang
    CXX: clang++
  become: yes
  become_user: '{{ osrm__user }}'

- name: "systemctl enable profiles on this machine"
  systemd_service:
    name: "osrm-routed-{{ item.key }}"
    enabled: true
    service:
      Unit:
        Description: "Open Source Routing Machine - Profile {{ item.key }}"
        After: syslog.target network.target
      Service:
        Type: simple
        User: osrm
        Group: osrm
        LimitNOFILE: 1000000
        ExecStart: "{{ osrm__basedir }}/osrm-backend/build/osrm-routed --algorithm={{ osrm__algo }} -p {{ item.value.port }} -t 6 {{ osrm__basedir }}/data/{{ item.key }}.osrm"
        Restart: always
        RestartSec: 700
  loop: "{{ osrm__profilearea|dict2items }}"
  loop_control:
    label: '{{ item.key }} - {{ item.value.host }}'
  when: "item.value.host == inventory_hostname"

- name: "remove systemd unit for profiles not on this host"
  file:
    path: '/etc/systemd/system/osrm-routed-{{ item.key }}.service'
    state: "absent"
  loop: "{{ osrm__profilearea|dict2items }}"
  loop_control:
    label: '{{ item.key }}'
  when: "item.value.host != inventory_hostname"

# osrm data, build graphs

- name: "create directory build"
  file:
    path: '{{ osrm__basedir }}/build'
    state: directory
    owner: '{{ osrm__user }}'
    group: '{{ osrm__datauser }}'
    mode: 0775

- name: "create directories data, about"
  file:
    path: '{{ osrm__basedir }}/{{ item }}'
    state: directory
    owner: '{{ osrm__user }}'
    group: '{{ osrm__user }}'
  with_items:
    - 'data'
    - 'about'

- name: "preprocess tasks"
  include_tasks: "preprocess.yml"

- name: "remove new-graphs if this is the preprocess machine"
  file:
    path: "/etc/cron.d/new-graphs"
    state: absent
  when: "osrm__buildhost == inventory_hostname"

- name: "osrm-routed runner tasks"
  include_tasks: "routed.yml"
  when: "osrm__buildhost != inventory_hostname"

- name: "sudoers file for allowing restart of osrm systemd unit"
  template:
    dest: "/etc/sudoers.d/osrm"
    src: "sudoers-osrm.j2"

# frontend, website

- name: "frontend"
  include_tasks: "frontend.yml"
  when: "osrm__fronthost == inventory_hostname"

# munin monitoring

- name: "Munin monitoring on hosts that are not the fronthost"
  block:
  - name: Setup nginx
    include_role:
      name: nginx

  - name: "default nginx site (for munin only, no routing)"
    nginx_site:
      site: 'default'
      src:  'nginx-default.jinja'
    vars:
      answer_routes: False
      munin: True
      server_name: "_"
      default_server: "default_server"
      cert: ""
      root: "{{ osrm__websitedir }}"
    notify: restart nginx
  when: "osrm__fronthost != inventory_hostname"

# network stuff

- name: 'ufw: allow osrm access from own servers'
  ufw:
    comment: 'allow {{ item.comment }}'
    rule: allow
    port: '3330:3340'
    proto: tcp
    from_ip: '{{ item.src }}'
  with_items:
    - {'comment': 'goode', 'src': '213.144.137.116' }
    - {'comment': 'goode', 'src': '2001:1620:2776:1::/64' }

# logging: osrm-backend routing daemons print all requests, which is logged by
# systemd AND forwarded to rsyslogd. Which gives multiple (syslog, daemon) huge
# log files

- name: Configure rsyslogd to drop all messages related to osrm-routed
  ansible.builtin.copy:
    content: ':programname, isequal, "osrm-routed" ~'
    dest: /etc/rsyslog.d/99-osrm.conf
