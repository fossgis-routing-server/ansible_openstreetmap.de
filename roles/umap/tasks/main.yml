- name: Create umap system account
  system_account:
    name: "{{ umap__user }}"
    home: "{{ umap__paths.host.basedir }}"

- name: Install prerequisites
  apt:
    name:
      - ca-certificates
      - curl
      - wget
      - git
      - logrotate

- name: Create apt keyrings directory
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: Add Docker GPG apt Key
  get_url:
    url: https://download.docker.com/linux/ubuntu/gpg
    dest: /etc/apt/keyrings/docker.asc
    mode: '0644'

- name: Add Docker Repository
  apt_repository:
    repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian trixie stable"
    state: present
  register: docker_repo_added

- name: Update apt cache
  apt:
    update_cache: yes
  when: docker_repo_added.changed

- name: Install Docker and Docker Compose
  apt:
    name:
      - docker-ce
      - docker-compose-plugin

- name: Add users to docker group
  user:
    name: "{{ item }}"
    groups: docker
    append: yes
  loop: "{{ [umap__user] + (users | default([]) | map(attribute='name') | list) }}"
  when: "item in accounts__active | default([]) or item == umap__user"

- name: Setup umap db env file
  template:
    src: "{{ item }}.jinja"
    dest: "{{ umap__paths.host.basedir }}/{{ item }}"
    owner: "{{ umap__user }}"
    group: docker
    mode: "0664"
  loop:
    - database.env

- name: Setup umap config file
  template:
    src: "umap.conf.jinja"
    dest: "{{ umap__paths.host.basedir }}/umap.conf"
    owner: "{{ umap__user }}"
    group: docker
    mode: "0664"

- name: Create umap directory structure
  file:
    path: "{{ umap__paths.host.basedir }}/{{ item }}"
    state: directory
    owner: "{{ umap__user }}"
    group: docker
    mode: "0775"
  loop:
    - sockets
    - umapdata/static_root
    - umapdata/media_root
    - umapdata/symbols
    - logs/nginx

- name: Setup docker-compose file
  template:
    src: "umap_docker-compose.yml.jinja"
    dest: "{{ umap__paths.host.basedir }}/docker-compose.yml"
    owner: "{{ umap__user }}"
    group: docker
    mode: "0664"

- name: Setup nginx-docker.conf for proxy
  template:
    src: "nginx-docker.conf.jinja"
    dest: "{{ umap__paths.host.basedir }}/nginx-docker.conf"
    owner: "{{ umap__user }}"
    group: docker
    mode: "0664"

- name: Copy Docker build files and entrypoint
  copy:
    src: "{{ item.src }}"
    dest: "{{ umap__paths.host.basedir }}/{{ item.dest }}"
    owner: "{{ umap__user }}"
    group: docker
    mode: "{{ item.mode }}"
  loop:
    - { src: "Dockerfile", dest: "Dockerfile", mode: "0664" }
    - { src: ".dockerignore", dest: ".dockerignore", mode: "0664" }
    - { src: "entrypoint.sh", dest: "entrypoint.sh", mode: "0755" }

- name: Setup umap nginx site
  nginx_site:
    site: '000-umapde'
    src:  'nginx-host.conf.jinja'
  notify: reload nginx

- name: Ensure Docker service is started
  systemd:
    name: docker
    state: started
    enabled: yes

- name: Copy favicon files
  copy:
    src: "favicon/{{ item }}"
    dest: "{{ umap__paths.host.basedir }}/umapdata/static_root/{{ item }}"
    owner: "{{ umap__user }}"
    group: docker
    mode: "0644"
  loop:
    - favicon.ico
    - favicon.svg
    - favicon-96x96.png
    - apple-touch-icon.png
    - site.webmanifest
    - web-app-manifest-192x192.png
    - web-app-manifest-512x512.png

- name: Create custom directories
  file:
    path: "{{ umap__paths.host.basedir }}/umapdata/custom/{{ item }}"
    state: directory
    owner: "{{ umap__user }}"
    group: docker
    mode: "0775"
  loop:
    - templates
    - templates/umap
    - static
    - static/umap
    - static/umap/css

- name: Deploy custom website files
  copy:
    src: "custom_website/"
    dest: "{{ umap__paths.host.basedir }}/umapdata/custom/"
    owner: "{{ umap__user }}"
    group: docker
    mode: "0644"
    directory_mode: "0775"

- name: Run Docker Compose up
  command: docker compose -f "{{ umap__paths.host.basedir }}"/docker-compose.yml up -d
  args:
    chdir: "{{ umap__paths.host.basedir }}"
  environment:
    COMPOSE_HTTP_TIMEOUT: "200"
  become_user: "{{ umap__user }}"
  become: true
  register: docker_compose_up_result

- name: Setup logrotate configuration for uMap
  template:
    src: "logrotate-umap.conf.jinja"
    dest: "/etc/logrotate.d/umap"
    owner: root
    group: root
    mode: "0644"
  when: docker_compose_up_result.changed | default(false)
  notify: reload nginx

- name: Include backup tasks
  include_tasks: backup.yml
  when: umap__backup_enabled | default(false)
  tags:
    - umap
    - backup
